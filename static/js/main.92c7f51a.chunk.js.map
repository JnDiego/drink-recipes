{"version":3,"sources":["components/Header.js","context/ContextCategories.js","context/ContextRecipes.js","components/Form.js","context/ContextModal.js","components/Recipe.js","components/RecipeList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","ContextCategories","createContext","ProviderCategories","props","useState","categories","setCategories","useEffect","a","axios","get","data","drinks","fetchCategories","Provider","value","children","ContextRecipes","ProviderRecipes","recipes","setRecipes","name","category","searchRecipes","setSearchRecipes","searchState","setSearchState","URL","result","getRecipes","Form","search","setSearch","useContext","getRecipeData","e","target","onSubmit","event","preventDefault","type","placeholder","onChange","map","key","strCategory","ContextModal","ProviderModal","recipeID","setRecipeID","recipeInfo","setRecipeInfo","getRecipeDetails","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","overflow","height","maxHeight","display","Recipe","recipe","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","information","ingredients","i","push","showIngredients","RecipeList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAUeA,G,YARA,WACb,OACE,4BAAQC,UAAU,YAChB,2D,+DCDOC,EAAoBC,0BA2BlBC,EAxBY,SAACC,GAAU,MAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAcpC,OATAC,qBAAU,YACa,uCAAG,4BAAAC,EAAA,4DACV,8DADU,SAEGC,IAAMC,IADnB,+DADU,OAEhBL,EAFgB,OAGtBC,EAAcD,EAAWM,KAAKC,QAHR,2CAAH,qDAKrBC,KACC,IAGD,kBAACb,EAAkBc,SAAnB,CACEC,MAAO,CAACV,eAEPF,EAAMa,WCrBAC,EAAiBhB,0BA4CfiB,EA1CS,SAACf,GAAW,IAAD,EAEHC,mBAAS,IAFN,mBAE1Be,EAF0B,KAEjBC,EAFiB,OAIShB,mBAAS,CACjDiB,KAAM,GACNC,SAAU,KANqB,mBAI1BC,EAJ0B,KAIXC,EAJW,OASKpB,oBAAS,GATd,mBAS1BqB,EAT0B,KASbC,EATa,KAWzBL,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SAgBd,OAdAf,qBAAU,WACLkB,GACa,uCAAG,8BAAAjB,EAAA,6DACTmB,EADS,mEACyDN,EADzD,cACmEC,GADnE,SAGMb,IAAMC,IAAIiB,GAHhB,OAGTC,EAHS,OAMfR,EAAWQ,EAAOjB,KAAKC,QANR,2CAAH,oDAQdiB,KAED,CAACN,IAGF,kBAACN,EAAeH,SAAhB,CACEC,MACE,CACEI,UACAK,mBACAE,mBAIHvB,EAAMa,WCgBEc,EAvDF,WAAO,IAAD,EAEW1B,mBAAS,CACnCiB,KAAM,GACNC,SAAU,KAJK,mBAEVS,EAFU,KAEFC,EAFE,KAOT3B,EAAe4B,qBAAWjC,GAA1BK,WAPS,EAQ4B4B,qBAAWhB,GAAhDO,EARS,EAQTA,iBAAkBE,EART,EAQSA,eAGpBQ,EAAgB,SAAAC,GACpBH,EAAU,2BACLD,GADI,kBAENI,EAAEC,OAAOf,KAAQc,EAAEC,OAAOrB,UAIzBsB,EAAQ,uCAAG,WAAOC,GAAP,SAAA9B,EAAA,sDACf8B,EAAMC,iBACNf,EAAiBO,GACjBL,GAAe,GAHA,2CAAH,sDAMd,OACE,0BACE3B,UAAU,SACVsC,SAAUA,GAEV,8BAAUtC,UAAU,eAClB,4EAGF,yBAAKA,UAAU,YACb,yBAAKA,UAAU,YACb,2BAAOyC,KAAK,OAAOnB,KAAK,OAAOtB,UAAU,eAAe0C,YAAY,uBAAuBC,SAAUR,KAEvG,yBAAKnC,UAAU,YACb,4BAAQA,UAAU,eAAesB,KAAK,WAAWqB,SAAUR,GACzD,4BAAQnB,MAAM,IAAd,uBACCV,EAAWsC,KAAI,SAAArB,GAAQ,OACtB,4BAAQsB,IAAKtB,EAASuB,YAAa9B,MAAOO,EAASuB,aAChDvB,EAASuB,kBAKlB,yBAAK9C,UAAU,YACb,2BAAOyC,KAAK,SAASzC,UAAU,4BAA4BgB,MAAM,sBC/C9D+B,EAAe7C,0BAgCb8C,EA9BO,SAAC5C,GAAW,IAAD,EAECC,mBAAS,MAFV,mBAExB4C,EAFwB,KAEdC,EAFc,OAGK7C,mBAAS,IAHd,mBAGxB8C,EAHwB,KAGZC,EAHY,KAiB/B,OAZA5C,qBAAU,YACc,uCAAG,8BAAAC,EAAA,yDAClBwC,EADkB,wDAGjBrB,EAHiB,mEAGiDqB,GAHjD,SAKFvC,IAAMC,IAAIiB,GALR,OAKjBC,EALiB,OAMvBuB,EAAevB,EAAOjB,KAAKC,OAAO,IANX,2CAAH,qDAQtBwC,KACC,CAACJ,IAGF,kBAACF,EAAahC,SAAd,CACEC,MAAO,CACLmC,aACAD,cACAE,kBAGDhD,EAAMa,W,gBCvBb,SAASqC,IAIP,MAAO,CACLC,IAAI,GAAD,OAJO,GAIP,KACHC,KAAK,GAAD,OAJO,GAIP,KACJC,UAAU,cAAD,OANC,GAMD,eALE,GAKF,OAIb,IAAMC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,UAAWP,EAAMQ,QAAQ,GACzBC,QAAST,EAAMU,QAAQ,EAAG,EAAG,GAC7BC,SAAU,SACVC,OAAQ,OACRC,UAAW,IACXC,QAAS,aA4FEC,EAxFA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EAGRvE,mBAASiD,GAAvBuB,EAHsB,sBAILxE,oBAAS,GAJJ,mBAItByE,EAJsB,KAIhBC,EAJgB,KAMvBC,EAAUtB,IANa,EAgBsBxB,qBAAWa,GAAtDI,EAhBqB,EAgBrBA,WAAYD,EAhBS,EAgBTA,YAAaE,EAhBJ,EAgBIA,cAiBjC,OACE,yBAAKpD,UAAU,iBACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eACX4E,EAAOK,UAGV,yBACEC,IAAKN,EAAOO,cACZC,IAAG,UAAKR,EAAOK,SAAZ,WACHjF,UAAU,iBAGZ,yBAAKA,UAAU,aACb,4BACEyC,KAAK,SACLzC,UAAU,4BACVqF,QAAS,WACPnC,EAAY0B,EAAOU,SA1C7BP,GAAQ,KAsCF,eAWA,kBAACQ,EAAA,EAAD,CACET,KAAMA,EACNU,QAAS,WACPtC,EAAY,MAhDtB6B,GAAQ,GAkDE3B,EAAc,MAIhB,yBAAKqC,MAAOZ,EAAY7E,UAAWgF,EAAQnB,OACzC,4BAAKV,EAAW8B,UAChB,wBAAIjF,UAAU,QAAd,gBACA,2BACGmD,EAAWuC,iBAEd,yBAAKR,IAAK/B,EAAWgC,cAAeC,IAAG,UAAKjC,EAAW8B,SAAhB,WAAmCjF,UAAU,mBAEpF,wDACA,4BAzDY,SAAA2F,GAEtB,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAI,GAAIA,IAClBF,EAAY,gBAAD,OAAiBE,KAC9BD,EAAYE,KACV,4BACGH,EAAY,gBAAD,OAAiBE,IAD/B,IACsCF,EAAY,aAAD,OAAcE,MAKrE,OAAOD,EA+CMG,CAAgB5C,UCzFlB6C,EAjBI,WAAM,IAGf5E,EAAYc,qBAAWhB,GAAvBE,QAER,OACE,yBAAKpB,UAAU,YACZoB,EAAQwB,KAAI,SAAAgC,GAAM,OACjB,kBAAC,EAAD,CACE/B,IAAK+B,EAAOU,QACZV,OAAQA,SCWHqB,MAlBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,yBAAKjG,UAAU,kBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,WCNQkG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.92c7f51a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"bg-alert\">\r\n      <h1>Search for drink recipes</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { createContext, useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\n// Create context\r\nexport const ContextCategories = createContext();\r\n\r\n// Provider is where functions and state are found\r\nconst ProviderCategories = (props) => {\r\n  // Create state of Context\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  //Fetch API\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      const url = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\r\n      const categories = await axios.get(url);\r\n      setCategories(categories.data.drinks);\r\n    }\r\n    fetchCategories();\r\n  }, [])\r\n\r\n  return (\r\n    <ContextCategories.Provider\r\n      value={{categories}}\r\n    >\r\n      {props.children}\r\n    </ContextCategories.Provider>\r\n  )\r\n\r\n}\r\n\r\nexport default ProviderCategories;\r\n","import React, { createContext, useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const ContextRecipes = createContext();\r\n\r\nconst ProviderRecipes = (props) => {\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n\r\n  const [searchRecipes, setSearchRecipes] = useState({\r\n    name: '',\r\n    category: ''\r\n  });\r\n\r\n  const [searchState, setSearchState] = useState(false);\r\n\r\n  const { name, category } = searchRecipes;\r\n\r\n  useEffect(() => {\r\n    if(searchState) {\r\n    const getRecipes = async () => {\r\n        const URL = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${name}&c=${category}`\r\n\r\n        const result = await axios.get(URL);\r\n\r\n        // console.log(result.data.drinks);\r\n        setRecipes(result.data.drinks);\r\n      }\r\n      getRecipes();\r\n    }\r\n  }, [searchRecipes])\r\n\r\n  return(\r\n    <ContextRecipes.Provider\r\n      value = {\r\n        {\r\n          recipes,\r\n          setSearchRecipes,\r\n          setSearchState\r\n        }\r\n      }\r\n    >\r\n      {props.children}\r\n    </ContextRecipes.Provider>\r\n  );\r\n}\r\n\r\nexport default ProviderRecipes;","import React, { useContext, useState } from 'react'\r\nimport { ContextCategories } from '../context/ContextCategories'\r\nimport { ContextRecipes } from '../context/ContextRecipes';\r\n\r\nconst Form = () => {\r\n\r\n  const [search, setSearch] = useState({\r\n    name: '',\r\n    category: ''\r\n  });\r\n\r\n  const { categories } = useContext(ContextCategories);\r\n  const { setSearchRecipes, setSearchState } = useContext(ContextRecipes);\r\n\r\n  // Function to read contents\r\n  const getRecipeData = e => {\r\n    setSearch({\r\n      ...search,\r\n      [e.target.name] : e.target.value\r\n    })\r\n  }\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setSearchRecipes(search);\r\n    setSearchState(true);\r\n  }\r\n\r\n  return (\r\n    <form\r\n      className=\"col-12\"\r\n      onSubmit={onSubmit}\r\n    >\r\n      <fieldset className=\"text-center\">\r\n        <legend>Search drinks by category or ingredient</legend>\r\n      </fieldset>\r\n\r\n      <div className=\"row mt-4\">\r\n        <div className=\"col-md-4\">\r\n          <input type=\"text\" name=\"name\" className=\"form-control\" placeholder=\"Search by ingredient\" onChange={getRecipeData}/>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <select className=\"form-control\" name=\"category\" onChange={getRecipeData}>\r\n            <option value=\"\">--Select category--</option>\r\n            {categories.map(category => (\r\n              <option key={category.strCategory} value={category.strCategory}>\r\n                {category.strCategory}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <input type=\"submit\" className=\"btn btn-block btn-primary\" value=\"Search drinks\"/>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React, { createContext } from 'react'\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nexport const ContextModal = createContext();\r\n\r\nconst ProviderModal = (props) => {\r\n\r\n  const [recipeID, setRecipeID] = useState(null);\r\n  const [recipeInfo, setRecipeInfo] = useState({})\r\n\r\n  useEffect(() => {\r\n    const getRecipeDetails = async () => {\r\n      if (!recipeID) return;\r\n\r\n      const URL = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${recipeID}`;\r\n\r\n      const result = await axios.get(URL);\r\n      setRecipeInfo( result.data.drinks[0]);\r\n    }\r\n    getRecipeDetails();\r\n  }, [recipeID])\r\n\r\n  return (\r\n    <ContextModal.Provider\r\n      value={{\r\n        recipeInfo,\r\n        setRecipeID,\r\n        setRecipeInfo\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ContextModal.Provider>\r\n  )\r\n}\r\n\r\nexport default ProviderModal;","import React, { useEffect } from 'react'\r\nimport { useContext } from 'react'\r\nimport { ContextModal } from '../context/ContextModal'\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useState } from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    overflow: 'scroll',\r\n    height: '100%',\r\n    maxHeight: 800,\r\n    display: 'block'\r\n    },\r\n}));\r\n\r\nconst Recipe = ({ recipe }) => {\r\n\r\n  // Modal Config\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  const { recipeInfo, setRecipeID, setRecipeInfo } = useContext(ContextModal);\r\n\r\n  //Show and format ingredients\r\n  const showIngredients = information => {\r\n    let ingredients = [];\r\n    for (let i = 1; i < 16; i++) {\r\n      if (information[`strIngredient${i}`]) {\r\n        ingredients.push(\r\n          <li>\r\n            {information[`strIngredient${i}`]} {information[`strMeasure${i}`]}\r\n          </li>\r\n        )\r\n      }\r\n    }\r\n    return ingredients;\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-md-4 mb-3\">\r\n      <div className=\"card\">\r\n        <h2 className=\"card-header\">\r\n          {recipe.strDrink}\r\n        </h2>\r\n\r\n        <img\r\n          src={recipe.strDrinkThumb}\r\n          alt={`${recipe.strDrink} recipe`}\r\n          className=\"card-img-top\"\r\n        />\r\n\r\n        <div className=\"card-body\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-block btn-primary\"\r\n            onClick={() => {\r\n              setRecipeID(recipe.idDrink)\r\n              handleOpen()\r\n            }}\r\n          >\r\n            View Recipe\r\n          </button>\r\n\r\n          <Modal\r\n            open={open}\r\n            onClose={() => {\r\n              setRecipeID(null);\r\n              handleClose();\r\n              setRecipeInfo({});\r\n            }}\r\n          >\r\n\r\n            <div style={modalStyle} className={classes.paper}>\r\n              <h2>{recipeInfo.strDrink}</h2>\r\n              <h3 className=\"mt-4\">Instructions</h3>\r\n              <p>\r\n                {recipeInfo.strInstructions}\r\n              </p>\r\n              <img src={recipeInfo.strDrinkThumb} alt={`${recipeInfo.strDrink} detail`} className=\"img-fluid my-4\" />\r\n\r\n              <h3>Ingredients and measures</h3>\r\n              <ul>\r\n                {showIngredients(recipeInfo)}\r\n              </ul>\r\n            </div>\r\n\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recipe\r\n","import React from 'react'\r\nimport { useContext } from 'react'\r\nimport { ContextRecipes } from '../context/ContextRecipes'\r\nimport Recipe from './Recipe';\r\n\r\nconst RecipeList = () => {\r\n\r\n  //Extract recipes\r\n  const { recipes } = useContext(ContextRecipes);\r\n\r\n  return (\r\n    <div className=\"row mt-5\">\r\n      {recipes.map(recipe => (\r\n        <Recipe\r\n          key={recipe.idDrink}\r\n          recipe={recipe}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RecipeList\r\n","import React from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport RecipeList from './components/RecipeList';\nimport ProviderCategories from './context/ContextCategories';\nimport ProviderRecipes from './context/ContextRecipes';\nimport ProviderModal from './context/ContextModal';\n\nfunction App() {\n  return (\n    <ProviderCategories>\n      <ProviderRecipes>\n        <ProviderModal>\n          <Header />\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <Form />\n            </div>\n            <RecipeList />\n          </div>\n        </ProviderModal>\n      </ProviderRecipes>\n    </ProviderCategories>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}